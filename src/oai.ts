/**
 * This file is auto-generated by OpenOpenAI/src/generate.ts using OpenAI's
 * OpenAPI spec as a source of truth.
 *
 * DO NOT EDIT THIS FILE MANUALLY if you want your changes to persist.
 */
import { z } from '@hono/zod-openapi'

export const OrderSchema = z.enum(['asc', 'desc'])

// One of `server_error` or `rate_limit_exceeded`.

export const CodeSchema = z.enum(['rate_limit_exceeded', 'server_error'])

// The object type, which is always `thread.run.step``.

export const PurpleObjectSchema = z.literal('thread.run.step')

// The status of the run step, which can be either `in_progress`, `cancelled`, `failed`,
// `completed`, or `expired`.

export const PurpleStatusSchema = z.enum([
  'cancelled',
  'completed',
  'expired',
  'failed',
  'in_progress'
])

// Always `logs`.
//
// Always `image`.

export const OutputTypeSchema = z.enum(['image', 'logs'])

// The type of tool call. This is always going to be `code_interpreter` for this type of
// tool call.
//
// The type of tool call. This is always going to be `retrieval` for this type of tool
// call.
//
// The type of tool call. This is always going to be `function` for this type of tool call.
//
// The type of tool being defined: `code_interpreter`
//
// The type of tool being defined: `retrieval`
//
// The type of tool being defined: `function`

export const ToolTypeSchema = z.enum([
  'code_interpreter',
  'function',
  'retrieval'
])

// Always `message_creation``.
//
// Always `tool_calls`.
//
// The type of run step, which can be either `message_creation` or `tool_calls`.

export const StepDetailsTypeSchema = z.enum(['message_creation', 'tool_calls'])

// The role of the entity that is creating the message. Currently only `user` is supported.

export const MessageRoleSchema = z.literal('user')

// The object type, which is always `thread.run`.

export const FluffyObjectSchema = z.literal('thread.run')

// The type of tool call the output is required for. For now, this is always `function`.

export const PurpleTypeSchema = z.literal('function')

// For now, this is always `submit_tool_outputs`.

export const RequiredActionTypeSchema = z.literal('submit_tool_outputs')

// The status of the run, which can be either `queued`, `in_progress`, `requires_action`,
// `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.

export const FluffyStatusSchema = z.enum([
  'cancelled',
  'cancelling',
  'completed',
  'expired',
  'failed',
  'in_progress',
  'queued',
  'requires_action'
])

// The object type, which is always `assistant`.

export const TentacledObjectSchema = z.literal('assistant')

// Always `file_citation`.
//
// Always `file_path`.

export const AnnotationTypeSchema = z.enum(['file_citation', 'file_path'])

// Always `image_file`.
//
// Always `text`.

export const ContentTypeSchema = z.enum(['image_file', 'text'])

// The object type, which is always `thread.message`.

export const StickyObjectSchema = z.literal('thread.message')

// The entity that produced the message. One of `user` or `assistant`.

export const DatumRoleSchema = z.enum(['assistant', 'user'])

// The object type, which is always `file`.

export const OpenAIFileObjectSchema = z.literal('file')

// The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`,
// `assistants`, and `assistants_output`.

export const OpenAIFilePurposeSchema = z.enum([
  'assistants',
  'assistants_output',
  'fine-tune',
  'fine-tune-results'
])

// Deprecated. The current status of the file, which can be either `uploaded`, `processed`,
// or `error`.

export const OpenAIFileStatusSchema = z.enum(['error', 'processed', 'uploaded'])

export const ListFilesResponseObjectSchema = z.literal('list')

// The object type, which is always `assistant.file`.

export const IndigoObjectSchema = z.literal('assistant.file')

// The object type, which is always `thread.message.file`.

export const IndecentObjectSchema = z.literal('thread.message.file')

// The intended purpose of the uploaded file.
//
// Use "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning) and "assistants" for
// [Assistants](/docs/api-reference/assistants) and
// [Messages](/docs/api-reference/messages). This allows us to validate the format of the
// uploaded file is correct for fine-tuning.

export const CreateFileRequestPurposeSchema = z.enum([
  'assistants',
  'fine-tune'
])

export const DeleteAssistantResponseObjectSchema =
  z.literal('assistant.deleted')

// The object type, which is always `thread`.

export const ThreadObjectSchema = z.literal('thread')

export const DeleteThreadResponseObjectSchema = z.literal('thread.deleted')

export const DeleteAssistantFileResponseObjectSchema = z.literal(
  'assistant.file.deleted'
)

export const DeleteAssistantFileResponseSchema = z.object({
  deleted: z.boolean(),
  id: z.string(),
  object: DeleteAssistantFileResponseObjectSchema
})

export const CreateAssistantFileRequestSchema = z.object({
  file_id: z.string()
})

export const ToolOutputSchema = z.object({
  output: z.string().optional(),
  tool_call_id: z.string().optional()
})

export const SubmitToolOutputsRunRequestSchema = z.object({
  tool_outputs: z.array(ToolOutputSchema)
})

export const ModifyRunRequestSchema = z.object({
  metadata: z.union([z.record(z.string(), z.any()), z.null()]).optional()
})

export const ModifyMessageRequestSchema = z.object({
  metadata: z.union([z.record(z.string(), z.any()), z.null()]).optional()
})

export const DeleteThreadResponseSchema = z.object({
  deleted: z.boolean(),
  id: z.string(),
  object: DeleteThreadResponseObjectSchema
})

export const ModifyThreadRequestSchema = z.object({
  metadata: z.union([z.record(z.string(), z.any()), z.null()]).optional()
})

export const ThreadSchema = z.object({
  created_at: z.number(),
  id: z.string(),
  metadata: z.record(z.string(), z.any()),
  object: ThreadObjectSchema
})

export const DeleteAssistantResponseSchema = z.object({
  deleted: z.boolean(),
  id: z.string(),
  object: DeleteAssistantResponseObjectSchema
})

export const DeleteFileResponseSchema = z.object({
  deleted: z.boolean(),
  id: z.string(),
  object: OpenAIFileObjectSchema
})

export const CreateFileRequestSchema = z.object({
  file: z.string(),
  purpose: CreateFileRequestPurposeSchema
})

export const MessageFilesSchema = z.object({
  created_at: z.number(),
  id: z.string(),
  message_id: z.string(),
  object: IndecentObjectSchema
})

export const ListMessageFilesResponseClassSchema = z.object({
  data: z.array(MessageFilesSchema),
  first_id: z.string(),
  has_more: z.boolean(),
  last_id: z.string(),
  object: z.string(),
  items: z.any()
})

export const AssistantFilesSchema = z.object({
  assistant_id: z.string(),
  created_at: z.number(),
  id: z.string(),
  object: IndigoObjectSchema
})

export const ListAssistantFilesResponseClassSchema = z.object({
  data: z.array(AssistantFilesSchema),
  first_id: z.string(),
  has_more: z.boolean(),
  last_id: z.string(),
  object: z.string(),
  items: z.any()
})

export const OpenAIFileClassSchema = z.object({
  bytes: z.number(),
  created_at: z.number(),
  filename: z.string(),
  id: z.string(),
  object: OpenAIFileObjectSchema,
  purpose: OpenAIFilePurposeSchema,
  status: OpenAIFileStatusSchema,
  status_details: z.string().optional()
})

export const ListFilesResponseSchema = z.object({
  data: z.array(
    z.union([
      z.array(z.any()),
      z.boolean(),
      OpenAIFileClassSchema,
      z.number(),
      z.number(),
      z.null(),
      z.string()
    ])
  ),
  object: ListFilesResponseObjectSchema
})

export const AmbitiousFunctionSchema = z.object({
  description: z.string().optional(),
  name: z.string(),
  parameters: z.record(z.string(), z.any())
})

export const CreateRunRequestToolSchema = z.object({
  type: ToolTypeSchema,
  function: AmbitiousFunctionSchema.optional()
})

export const CreateRunRequestSchema = z.object({
  assistant_id: z.string(),
  instructions: z.string().optional(),
  metadata: z.union([z.record(z.string(), z.any()), z.null()]).optional(),
  model: z.string().optional(),
  tools: z.array(CreateRunRequestToolSchema).optional()
})

export const FilePathSchema = z.object({
  file_id: z.string()
})

export const FileCitationSchema = z.object({
  file_id: z.string(),
  quote: z.string()
})

export const FileSchema = z.object({
  end_index: z.number(),
  file_citation: FileCitationSchema.optional(),
  start_index: z.number(),
  text: z.string(),
  type: AnnotationTypeSchema,
  file_path: FilePathSchema.optional()
})

export const TextSchema = z.object({
  annotations: z.array(FileSchema),
  value: z.string()
})

export const ImageFileClassSchema = z.object({
  file_id: z.string()
})

export const ContentElementSchema = z.object({
  image_file: ImageFileClassSchema.optional(),
  type: ContentTypeSchema,
  text: TextSchema.optional()
})

export const TheMessageObjectSchema = z.object({
  assistant_id: z.string(),
  content: z.array(ContentElementSchema),
  created_at: z.number(),
  file_ids: z.array(z.string()),
  id: z.string(),
  metadata: z.record(z.string(), z.any()),
  object: StickyObjectSchema,
  role: DatumRoleSchema,
  run_id: z.string(),
  thread_id: z.string()
})

export const ListMessagesResponseClassSchema = z.object({
  data: z.array(TheMessageObjectSchema),
  first_id: z.string(),
  has_more: z.boolean(),
  last_id: z.string(),
  object: z.string()
})

export const HilariousFunctionSchema = z.object({
  description: z.string().optional(),
  name: z.string(),
  parameters: z.record(z.string(), z.any())
})

export const ModifyAssistantRequestToolSchema = z.object({
  type: ToolTypeSchema,
  function: HilariousFunctionSchema.optional()
})

export const ModifyAssistantRequestSchema = z.object({
  description: z.string().optional(),
  file_ids: z.array(z.string()).optional(),
  instructions: z.string().optional(),
  metadata: z.union([z.record(z.string(), z.any()), z.null()]).optional(),
  model: z.string().optional(),
  name: z.string().optional(),
  tools: z.array(ModifyAssistantRequestToolSchema).optional()
})

export const IndecentFunctionSchema = z.object({
  description: z.string().optional(),
  name: z.string(),
  parameters: z.record(z.string(), z.any())
})

export const CreateAssistantRequestToolSchema = z.object({
  type: ToolTypeSchema,
  function: IndecentFunctionSchema.optional()
})

export const CreateAssistantRequestSchema = z.object({
  description: z.string().optional(),
  file_ids: z.array(z.string()).optional(),
  instructions: z.string().optional(),
  metadata: z.union([z.record(z.string(), z.any()), z.null()]).optional(),
  model: z.string(),
  name: z.string().optional(),
  tools: z.array(CreateAssistantRequestToolSchema).optional()
})

export const IndigoFunctionSchema = z.object({
  description: z.string().optional(),
  name: z.string(),
  parameters: z.record(z.string(), z.any())
})

export const FluffyToolSchema = z.object({
  type: ToolTypeSchema,
  function: IndigoFunctionSchema.optional()
})

export const AssistantSchema = z.object({
  created_at: z.number(),
  description: z.string(),
  file_ids: z.array(z.string()),
  id: z.string(),
  instructions: z.string(),
  metadata: z.record(z.string(), z.any()),
  model: z.string(),
  name: z.string(),
  object: TentacledObjectSchema,
  tools: z.array(FluffyToolSchema)
})

export const ListAssistantsResponseSchema = z.object({
  data: z.array(AssistantSchema),
  first_id: z.string(),
  has_more: z.boolean(),
  last_id: z.string(),
  object: z.string()
})

export const StickyFunctionSchema = z.object({
  description: z.string().optional(),
  name: z.string(),
  parameters: z.record(z.string(), z.any())
})

export const PurpleToolSchema = z.object({
  type: ToolTypeSchema,
  function: StickyFunctionSchema.optional()
})

export const TentacledFunctionSchema = z.object({
  arguments: z.string(),
  name: z.string()
})

export const SubmitToolOutputsToolCallSchema = z.object({
  function: TentacledFunctionSchema,
  id: z.string(),
  type: PurpleTypeSchema
})

export const SubmitToolOutputsSchema = z.object({
  tool_calls: z.array(SubmitToolOutputsToolCallSchema)
})

export const RequiredActionSchema = z.object({
  submit_tool_outputs: SubmitToolOutputsSchema,
  type: RequiredActionTypeSchema
})

export const FluffyLastErrorSchema = z.object({
  code: CodeSchema,
  message: z.string()
})

export const ARunOnAThreadSchema = z.object({
  assistant_id: z.string(),
  cancelled_at: z.number(),
  completed_at: z.number(),
  created_at: z.number(),
  expires_at: z.number(),
  failed_at: z.number(),
  file_ids: z.array(z.string()),
  id: z.string(),
  instructions: z.string(),
  last_error: FluffyLastErrorSchema,
  metadata: z.record(z.string(), z.any()),
  model: z.string(),
  object: FluffyObjectSchema,
  required_action: RequiredActionSchema,
  started_at: z.number(),
  status: FluffyStatusSchema,
  thread_id: z.string(),
  tools: z.array(PurpleToolSchema)
})

export const ListRunsResponseSchema = z.object({
  data: z.array(ARunOnAThreadSchema),
  first_id: z.string(),
  has_more: z.boolean(),
  last_id: z.string(),
  object: z.string()
})

export const FluffyFunctionSchema = z.object({
  description: z.string().optional(),
  name: z.string(),
  parameters: z.record(z.string(), z.any())
})

export const CreateThreadAndRunRequestToolSchema = z.object({
  type: ToolTypeSchema,
  function: FluffyFunctionSchema.optional()
})

export const MessageSchema = z.object({
  content: z.string(),
  file_ids: z.array(z.string()).optional(),
  metadata: z.union([z.record(z.string(), z.any()), z.null()]).optional(),
  role: MessageRoleSchema
})

export const ThreadClassSchema = z.object({
  messages: z.array(MessageSchema).optional(),
  metadata: z.union([z.record(z.string(), z.any()), z.null()]).optional()
})

export const CreateThreadAndRunRequestSchema = z.object({
  assistant_id: z.string(),
  instructions: z.string().optional(),
  metadata: z.union([z.record(z.string(), z.any()), z.null()]).optional(),
  model: z.string().optional(),
  thread: ThreadClassSchema.optional(),
  tools: z.array(CreateThreadAndRunRequestToolSchema).optional()
})

export const PurpleFunctionSchema = z.object({
  arguments: z.string(),
  name: z.string(),
  output: z.string()
})

export const ImageSchema = z.object({
  file_id: z.string()
})

export const CodeInterpreterOutputSchema = z.object({
  logs: z.string().optional(),
  type: OutputTypeSchema,
  image: ImageSchema.optional()
})

export const CodeInterpreterSchema = z.object({
  input: z.string(),
  outputs: z.array(CodeInterpreterOutputSchema)
})

export const ToolCallSchema = z.object({
  code_interpreter: CodeInterpreterSchema.optional(),
  id: z.string(),
  type: ToolTypeSchema,
  retrieval: z.union([z.record(z.string(), z.any()), z.null()]).optional(),
  function: PurpleFunctionSchema.optional()
})

export const MessageCreationSchema = z.object({
  message_id: z.string()
})

export const StepDetailsSchema = z.object({
  message_creation: MessageCreationSchema.optional(),
  type: StepDetailsTypeSchema,
  tool_calls: z.array(ToolCallSchema).optional()
})

export const PurpleLastErrorSchema = z.object({
  code: CodeSchema,
  message: z.string()
})

export const RunStepsSchema = z.object({
  assistant_id: z.string(),
  cancelled_at: z.number(),
  completed_at: z.number(),
  created_at: z.number(),
  expired_at: z.number(),
  failed_at: z.number(),
  id: z.string(),
  last_error: PurpleLastErrorSchema,
  metadata: z.record(z.string(), z.any()),
  object: PurpleObjectSchema,
  run_id: z.string(),
  status: PurpleStatusSchema,
  step_details: StepDetailsSchema,
  thread_id: z.string(),
  type: StepDetailsTypeSchema
})

export const ListRunStepsResponseClassSchema = z.object({
  data: z.array(RunStepsSchema),
  first_id: z.string(),
  has_more: z.boolean(),
  last_id: z.string(),
  object: z.string()
})

export const GetMessageFileParamsPathClassSchema = z.object({
  file_id: z.string(),
  message_id: z.string(),
  thread_id: z.string()
})

export const ListMessageFilesParamsQueryClassSchema = z.object({
  after: z.string().optional(),
  before: z.string().optional(),
  limit: z.number().optional(),
  order: OrderSchema.optional()
})

export const ListMessageFilesParamsPathClassSchema = z.object({
  message_id: z.string(),
  thread_id: z.string()
})

export const DeleteAssistantFileParamsPathClassSchema = z.object({
  assistant_id: z.string(),
  file_id: z.string()
})

export const GetAssistantFileParamsPathClassSchema = z.object({
  assistant_id: z.string(),
  file_id: z.string()
})

export const CreateAssistantFileParamsPathClassSchema = z.object({
  assistant_id: z.string()
})

export const ListAssistantFilesParamsQueryClassSchema = z.object({
  after: z.string().optional(),
  before: z.string().optional(),
  limit: z.number().optional(),
  order: OrderSchema.optional()
})

export const ListAssistantFilesParamsPathClassSchema = z.object({
  assistant_id: z.string()
})

export const GetRunStepParamsPathClassSchema = z.object({
  run_id: z.string(),
  step_id: z.string(),
  thread_id: z.string()
})

export const ListRunStepsParamsQueryClassSchema = z.object({
  after: z.string().optional(),
  before: z.string().optional(),
  limit: z.number().optional(),
  order: OrderSchema.optional()
})

export const ListRunStepsParamsPathClassSchema = z.object({
  run_id: z.string(),
  thread_id: z.string()
})

export const CancelRunParamsPathClassSchema = z.object({
  run_id: z.string(),
  thread_id: z.string()
})

export const SubmitToolOuputsToRunParamsPathClassSchema = z.object({
  run_id: z.string(),
  thread_id: z.string()
})

export const ModifyRunParamsPathClassSchema = z.object({
  run_id: z.string(),
  thread_id: z.string()
})

export const GetRunParamsPathClassSchema = z.object({
  run_id: z.string(),
  thread_id: z.string()
})

export const CreateRunParamsPathClassSchema = z.object({
  thread_id: z.string()
})

export const ListRunsParamsQueryClassSchema = z.object({
  after: z.string().optional(),
  before: z.string().optional(),
  limit: z.number().optional(),
  order: OrderSchema.optional()
})

export const ListRunsParamsPathClassSchema = z.object({
  thread_id: z.string()
})

export const ModifyMessageParamsPathClassSchema = z.object({
  message_id: z.string(),
  thread_id: z.string()
})

export const GetMessageParamsPathClassSchema = z.object({
  message_id: z.string(),
  thread_id: z.string()
})

export const CreateMessageParamsPathClassSchema = z.object({
  thread_id: z.string()
})

export const ListMessagesParamsQueryClassSchema = z.object({
  after: z.string().optional(),
  before: z.string().optional(),
  limit: z.number().optional(),
  order: OrderSchema.optional()
})

export const ListMessagesParamsPathClassSchema = z.object({
  thread_id: z.string()
})

export const DeleteThreadParamsPathClassSchema = z.object({
  thread_id: z.string()
})

export const ModifyThreadParamsPathClassSchema = z.object({
  thread_id: z.string()
})

export const GetThreadParamsPathClassSchema = z.object({
  thread_id: z.string()
})

export const DeleteAssistantParamsPathClassSchema = z.object({
  assistant_id: z.string()
})

export const ModifyAssistantParamsPathClassSchema = z.object({
  assistant_id: z.string()
})

export const GetAssistantParamsPathClassSchema = z.object({
  assistant_id: z.string()
})

export const ListAssistantsParamsQueryClassSchema = z.object({
  after: z.string().optional(),
  before: z.string().optional(),
  limit: z.number().optional(),
  order: OrderSchema.optional()
})

export const DownloadFileParamsPathClassSchema = z.object({
  file_id: z.string()
})

export const RetrieveFileParamsPathClassSchema = z.object({
  file_id: z.string()
})

export const DeleteFileParamsPathClassSchema = z.object({
  file_id: z.string()
})

export const ListFilesParamsQueryClassSchema = z.object({
  purpose: z.string().optional()
})
